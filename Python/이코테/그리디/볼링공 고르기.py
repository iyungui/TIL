# 풀이
'''
1. 각 무게별로 볼링공이 몇 개 있는 지 카운트.
2. 모든 무게에 대해, 해당 무게의 볼링공을 선택하는 경우를 고려하고, 그 선택에 대해 남은 다른 무게의 볼링공들과 조합을 만들 수 있는 경우의 수 계산
3. 첫 번째 볼링공을 선택했을 때, 두 번째 볼링공을 선택하는 경우의 수는 남은 볼링공의 수에 따라 결정된다. 따라서, 첫 번째 볼링공의 무게가 된 이후에 남은 모든 볼링공 중에서 다른 무게를 가진 볼링공을 선택할 수 있는 경우의 수를 더함.
4. 이 과정을 모든 무게에 반복하여 최종적으로 가능한 모든 조합의 수를 계산하기.
'''

n, m = map(int, input().split())    # 볼링공의 개수 n, 공의 최대 무게 m
balls = list(map(int, input().split())) # 각 볼링공의 무게

# 1.  각 무게별 볼링공 개수 카운트
count = [0] * (m + 1)
for ball in balls:
    count[ball] += 1

# 2. 볼링공을 고르는 경우의 수 계산
result = 0
for i in range(1, m + 1):   # 무게가 1부터, 최대 m 까지
    # i 무게의 볼링공을 고른 후, 남은 볼링의 개수
    n -= count[i]
    # i 무게의 볼링공을 고른 경우, 남은 볼링공 중에서 고를 수 있는 경우의 수
    result += count[i] * n

print(result)