# 삽입정렬: 선택정렬 보다 효율적인 알고리즘. 특히 '데이터가 거의 정렬되어 있을 때' 
# 첫 번째 데이터는 정렬되어 있다고 판단. 두 번째 데이터부터 삽입 정렬 시작.

# 삽입 정렬에서는, 특정한 데이터가 삽입될 위치를 선정할 때 (삽입될 위치를 찾기 위하여 왼쪽으로 한 칸씩 이동할 때), 
# 삽입될 데이터보다 작은 데이터를 만나면 그 위치에서 멈추면 된다. 
# 정렬이 이루어진 원소는 오름차순으로 정렬되어 있기 때문.
# 따라서, 자기보다 작은 데이터를 만났다면 더 이상 데이터를 살펴볼 필요없이 그 자리에 삽입

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):  # 두 번째 원소부터 시작
    for j in range(i, 0, -1):   # 인덱스 i 부터 1까지 감소하며 반복하는 문법
        if array[j] < array[j - 1]:
            array[j], array[j - 1] = array[j - 1], array[j]
        else:   # 삽입될 데이터보다 작은 데이터를 만나면 그 위치에서 멈추면 된다. 
            break

print(array)

# 삽입 정렬의 시간 복잡도: O(n^2)
# 그러나, 거의 정렬되어 있는 상태라면, 퀵 정렬 등 여타 정렬 알고리즘을 이용하는 것보다 삽입 정렬을 이용 O(n)

